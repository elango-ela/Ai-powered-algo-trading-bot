import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from transformers import AutoTokenizer, AutoModelForSequenceClassification

# Set device (cuda:0 if GPU available, otherwise use CPU)
device = "cuda:0" if torch.cuda.is_available() else "cpu"

# Load the FinBERT tokenizer and model
tokenizer = AutoTokenizer.from_pretrained("ProsusAI/finbert")
finbert_model = AutoModelForSequenceClassification.from_pretrained("ProsusAI/finbert").to(device)
labels = ["positive", "negative", "neutral"]

# Function to encode sentiment labels
def encode_sentiment(sentiment):
    label_encoder = LabelEncoder()
    encoded_sentiment = label_encoder.fit_transform(sentiment)
    return encoded_sentiment

# Sample data
news_data = ['markets responded negatively to the news!', 'traders were displeased!']
sentiments = ['negative', 'negative']

# Encode sentiments
encoded_sentiments = encode_sentiment(sentiments)

# Tokenize and convert to PyTorch tensors
tokens = tokenizer(news_data, return_tensors="pt", padding=True, truncation=True)
input_ids = tokens["input_ids"].to(device)
attention_mask = tokens["attention_mask"].to(device)
labels = torch.tensor(encoded_sentiments, dtype=torch.long).to(device)

# Define LSTM model
class LSTMClassifier(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers=1):
        super(LSTMClassifier, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        out, _ = self.lstm(x)
        out = self.fc(out[:, -1, :])  # Take the output of the last time step
        out = self.softmax(out)
        return out

# Initialize model, loss function, and optimizer
input_size = 768  # FinBERT model output size
hidden_size = 128
output_size = len(labels)  # Number of sentiment classes
num_layers = 1

lstm_model = LSTMClassifier(input_size, hidden_size, output_size, num_layers).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(lstm_model.parameters(), lr=0.001)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    input_ids, labels, test_size=0.2, random_state=42
)

# Convert data to DataLoader
train_dataset = TensorDataset(X_train, y_train)
test_dataset = TensorDataset(X_test, y_test)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

# Training loop
num_epochs = 10

for epoch in range(num_epochs):
    lstm_model.train()

    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)

        optimizer.zero_grad()

        outputs = lstm_model(inputs)
        loss = criterion(outputs, labels)

        loss.backward()
        optimizer.step()

    # Validation
    lstm_model.eval()
    correct = 0
    total = 0

    with torch.no_grad():
        for inputs, labels in test_loader:
            inputs, labels = inputs.to(device), labels.to(device)

            outputs = lstm_model(inputs)
            _, predicted = torch.max(outputs, 1)

            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    accuracy = correct / total
    print(f"Epoch {epoch+1}/{num_epochs}, Loss: {loss.item():.4f}, Accuracy: {accuracy:.4f}")

# Evaluate the LSTM model
lstm_model.eval()
with torch.no_grad():
    finbert_tokens = tokenizer(news_data, return_tensors="pt", padding=True, truncation=True)
    finbert_input_ids = finbert_tokens["input_ids"].to(device)
    finbert_attention_mask = finbert_tokens["attention_mask"].to(device)

    finbert_outputs = finbert_model(finbert_input_ids, attention_mask=finbert_attention_mask)
    finbert_result = finbert_outputs["logits"]
    finbert_result = torch.nn.functional.softmax(torch.sum(finbert_result, 0), dim=-1)

    lstm_inputs = lstm_model(finbert_result.unsqueeze(0))

    confidence = lstm_inputs[0][labels.argmax().item()].item()
    print(f"Estimated Confidence: {confidence:.4f}")
